<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, July 05, 2008, 4:46 PM -->
<!-- MuClient version 4.31 -->

<muclient>
<plugin
		name="WinkleWinkle_Search_Destroy_131"
		author="WinkleWinkle, Starling"
		id="e50b1d08a0cfc0ee9c442001"
		language="Lua"
		purpose="Find mobs faster"
		date_written="2017-06-01 17:00:00"
		requires="4.76"
		version="1.3"
		save_state="y"
   >
   
<description trim="n">
<![CDATA[

SEARCH AND DESTROY USAGE:

===== SHOW THIS HELP ===============>
>   search help
        - shows only this help
>   ww help
        - all winklewinkle(tm) plugins show help
		
===== HUNT TRICK ===============>
>   ht citizen       
        - will hunt all citizens upwards from 1.citizen
>   ht 3 citizen     
        - will hunt all citizens starting at 3.citizen
>   ht abort         
        - will abort a currently running hunt trick script
>   ht
        - Typing just this will hunt for the last mob you performed "ht" or 
		"qw" for


>   ht find 
		- try and hunt the last mob you "couldn't hunt for some reason" to
		confirm if it is in your current room or not
		
===== AUTO HUNT ================>
>   ah citizen       
        - will auto-hunt and move towards a mob until mob is found, you get 
		in a fight, or you abort the auto-hunt
>   ah 3.citizen     
        - will auto-hunt 3.citizen
>   ah abort         
        - will abort a currently running auto hunt script

===== QUICK KILL=================>
>   qk  - Typing just this will attack the last mob you performed "ht" or "qw" 
        for.  No more typos in scans!

NOTE:  If you want a custom kill action.. make an alias that will trigger on 
        k *
       This will receive the qk's kill command

Quick Scan
===== QUICK SCAN ===============>
>   qs               
        - Typing just this will scan for the last mob you performed "ht" or 
		"qw" for

===== QUICK WHERE ==============>
>   qw lich          
        - This will return a room name and a speedwalk hyperlink to the room
		the lich is in (may have multiple rooms in list)
>   qw               
        - Typing just this will "where" for the last mob you performed "ht" or 
		"qw" for
		
]]>
</description>
</plugin>


<aliases>
	<alias 
		match="^(?:ww|search) help$"
		enabled="y"
		sequence="100"
		send_to="12"
		regexp="y"
		keep_evaluating="y"		
		>
		<send>ColourNote("SteelBlue", "", GetPluginInfo (GetPluginID (), 3))</send>
	</alias>

	<!-- debug on/off command -->
	<alias
		match="^sd debug$"
		script="sd_debug"
		name="ali_toggle_debug"
		regexp="y"
		enabled="y"
		sequence="100"
		>
	</alias>
	
	<!-- Quick scan commands-->
	<alias
		match="^qs$"
		script="quick_scan"
		name="QuickScan"
		regexp="y"
		enabled="y"
		sequence="100"
		>
	</alias>

	<!-- Auto hunt commands-->
	<alias
		match="^ah (?<mob>.+)$"
		script="auto_hunt_start"
		name="AutoHunt"
		regexp="y"
		enabled="y"
		sequence="100"
		>
	</alias>

	<alias
		match="^ah a(?:bort)?$"
		script="auto_hunt_abort"
		name="AutoHuntAbort"
		regexp="y"
		enabled="y"
		sequence="95"
		keep_evaluating="n"
		>
	</alias>

	<!-- Hunt trick commands -->
	<alias
		match="^(?<exact>x_)?ht(?!tp) ?(?:(?<index>[0-9]+) )?(?:(?<mob>.+))?$"
		script="hunt_trick"
		name="HuntTrick"
		regexp="y"
		enabled="y"
		group="HuntTrick"
		sequence="100"
		>
	</alias>

	<!-- original hunt trick abort command, being considered for removal -->
	<alias
		match="^ht a(?:bort)?$"
		script="hunt_trick_abort"
		name="HuntTrickAbort"
		regexp="y"
		enabled="y"
		group="HuntTrick"
		sequence="95"
		keep_evaluating="n"
		>
	</alias>

	<alias
		match="^hta$"
		script="hunt_trick_abort"
		name="HuntTrickAbort_2"
		regexp="y"
		enabled="y"
		group="HuntTrick"
		sequence="95"
		keep_evaluating="n"
		>
	</alias>	
	
	<!-- Quick-kill commands: qk, ak, kk -->
	<alias
		match="^q(?:uick)?k(?:ill)?$"
		script="quick_kill"
		name="QuickKill"
		regexp="y"
		enabled="y"
		sequence="100"
		>
	</alias>
	
	<alias
		match="^ak$"
		script="quick_kill"
		name="QuickKill_var_2"
		regexp="y"
		enabled="y"
		sequence="100"
		>
	</alias>
	
	<alias
		match="^kk$"
		script="quick_kill"
		name="QuickKill_var_3"
		regexp="y"
		enabled="y"
		sequence="100"
		>
	</alias>
	
	<!-- Quick where commands -->
	<alias
		match="^(?<exact>x_)?qw ?(?:(?<index>[0-9]+)\.)?(?<mob>.+)?$"
		script="quick_where_start"
		name="QuickWhere"
		enabled="y"
		regexp="y"
		sequence="100"
		ignore_case="y"
		>
	</alias>

	<!-- Page Size -->
	<alias
		match="^xset suspend page size$"
		script="suspend_page_size"
		enabled="y"
		regexp="y"
		sequence="100"
		ignore_case="y"
		>
	</alias>

	<alias
		match="^xset resume page size$"
		script="resume_page_size"
		enabled="y"
		regexp="y"
		sequence="100"
		ignore_case="y"
		>
	</alias>
	
		<alias
		match="^xset noexp (?<arg>off|[0-9]+)$"
		script="xset_noexp"
		name="cmd_xset_noexp"
		enabled="y"
		regexp="y"
		sequence="100"
		ignore_case="y"
		>
	</alias>
</aliases>


<triggers>
<!-- You couldn\'t find a path to .+ from here\. -->
<!-- You have no idea what you\'re doing\, but maybe .+ left .+\? -->
<!-- There are traces of .+ having been here. Perhaps they lead .+\? -->
<!-- The trail of .+ is confusing, but you're reasonably sure .+ headed .+\. -->
<!-- You are confident that .+ passed through here, heading .+\. -->
<!-- You are almost certain that .+ is .+ from here\. -->
<!-- You are certain that .+ is .+ from here\. -->
<!-- .+ is here\! -->

	<!-- Hunt trick -->
	<trigger
		match="^You are certain that .+ is .+ from here\.|You are almost certain that .+ is .+ from here\.|You are confident that .+ passed through here, heading .+\.|The trail of .+ is confusing, but you're reasonably sure .+ headed .+\.|There are traces of .+ having been here. Perhaps they lead .+\?|You have no idea what you\'re doing\, but maybe .+ is .+\?|You couldn\'t find a path to .+ from here\.|.+ is here\!$"
		script="hunt_trick_continue"
		enabled="n"
		group="HuntTrick"
		regexp="y"
		sequence="100"
		>
	</trigger>

	<trigger
		match="^You seem unable to hunt that target for some reason\.$"
		script="hunt_trick_complete"
		enabled="n"
		group="HuntTrick"
		regexp="y"
		sequence="100"
		>
	</trigger>
	
	<trigger
		match="^.+ is here\!$"
		script="hunt_trick_continue"
		enabled="n"
		group="HuntTrick"
		regexp="y"
		sequence="100"
		>
	</trigger>

	<trigger
		match="^No one in this area by the name '.+'\.|No one in this area by that name\.|There is no .+ around here\.|Not while you are fighting\!|You can't hunt while (?:resting|sitting)\.|You dream about going on a nice hunting trip, with pony rides, and campfires too\.$"
		script="hunt_trick_abort"
		enabled="n"
		group="HuntTrick"
		regexp="y"
		send_to="12"
		sequence="100"
		keep_evaluating="y"
		>
	</trigger>

	<!--  AUTO HUNT -->
	<trigger
		match="^You are (?<confidence>certain) that (?<mob>.+) is (?<dir>.+) from here\.$"
		script="auto_hunt"
		name="AutoHunt1"
		group="AutoHunt"
		enabled="n"
		regexp="y"
		sequence="100"
		>
	</trigger>

	<trigger
		match="^You are (?<confidence>almost) certain that (?<mob>.+) is (?<dir>.+) from here\.$"
		script="auto_hunt"
		name="AutoHunt2"
		group="AutoHunt"
		enabled="n"
		regexp="y"
		sequence="100"
		>
	</trigger>

	<trigger
		match="You are (?<confidence>confident) that (?<mob>.+) passed through here\, heading (?<dir>.+)\.$"
		script="auto_hunt"
		name="AutoHunt3"
		group="AutoHunt"
		enabled="n"
		regexp="y"
		sequence="100"
		>
	</trigger>

 	<trigger
		match="^The trail of (?<mob>.+) is confusing. but you.re (?<confidence>reasonably sure) .+ headed (?<dir>.+)\.$"
		script="auto_hunt"
		name="AutoHunt4"
		group="AutoHunt"
		enabled="n"
		regexp="y"
		sequence="100"
		>
	</trigger>
 	
	<trigger
		match="^You couldn\'t find a path to .+ from here\.|.+ is here\!|Not while you are fighting\!$"
		name="AutoHuntEnd"
		group="AutoHunt"
		enabled="n"
		regexp="y"
		sequence="100"
		send_to="12"
		>
		<send>EnableTriggerGroup("AutoHunt", false)</send>
	</trigger>
	
	<!-- page size -->
	<trigger
		match="^You currently display ([0-9]+) lines per page\.|You do not page long messages\.$"
		script="capture_page_size"
		name="trg_page_size"
		enabled="n"
		regexp="y"
		sequence="100"
		omit_from_output = "n"
		keep_evaluating="y"		
		>
	</trigger>
	
	<!-- where trick -->
	<trigger
		match="^There is no [0-9]+\..+ around here\.$"
		script="wt_fail"
		name="trg_wt_fail"
		group="wt"
		enabled="n"
		regexp="y"
		sequence="100"
		>
	</trigger>
	
	<trigger
		match="^(?<mob>.{30}) (?<room>.+)$"
		script="wt_continue"
		name="trg_wt_continue"
		group="wt"
		enabled="n"
		regexp="y"
		sequence="100"
		>
	</trigger>
	
	-- auto set noexp
	<trigger
		match="You may take a campaign at this level."
		script="auto_set_noexp"
		name="trg_auto_set_noexp"
		enabled="y"
		regexp="n"
		sequence="100"
		>
	</trigger>

	<trigger
		match="You will have to level before you can go on another campaign."
		script="new_cp_must_level"
		name="trg_new_cp_must_level"
		enabled="y"
		regexp="n"
		sequence="100"
		keep_evaluating="y"
		>
	</trigger>

	<trigger
		match="^.+ tells you \'Good luck in your campaign\!\'$"
		script="player_start_new_cp"
		name="trg_player_start_new_cp"
		enabled="y"
		regexp="y"
		sequence="100"
		keep_evaluating="y"
		>
	</trigger>
	
	<trigger
		match="CONGRATULATIONS! You have completed your campaign."
		script="player_not_on_cp"
		name="trg_cp_complete"
		enabled="y"
		regexp="n"
		sequence="100"
		keep_evaluating="y"
		>
	</trigger>
	
	<trigger
		match="You are not currently on a campaign."
		script="player_not_on_cp"
		name="trg_not_on_cp"
		enabled="y"
		regexp="n"
		sequence="100"
		keep_evaluating="y"
		>
	</trigger>
	
	<trigger
		match="You will no longer receive experience. Happy questing!"
		script="noexp_is_on"
		name="trg_noexp_is_on"
		enabled="y"
		regexp="n"
		sequence="100"
		keep_evaluating="y"
		>
	</trigger>

	<trigger
		match="You will now receive experience. Happy leveling!"
		script="noexp_is_off"
		name="trg_noexp_is_off"
		enabled="y"
		regexp="n"
		sequence="100"
		keep_evaluating="y"
		>
	</trigger>
	
	<trigger
		match="^You receive (\d+) experience (?:point|points)\.$"
		script="mobkill_awards_xp"
		name="trg_mobkill_awards_xp"
		enabled="y"
		regexp="y"
		sequence="100"
		keep_evaluating="y"
		>
	</trigger>

	<trigger
		match="You raise a level! You are now level *."
		script="noexp_raise_level"
		name="trg_noexp_raise_level"
		enabled="y"
		regexp="n"
		sequence="100"
		keep_evaluating="y"
		>
	</trigger>	
	
	<trigger
		match="^You have \d+ days, \d+ hours and \d+ minutes left to finish this campaign\.$"
		script="player_is_on_cp"
		name="trg_player_is_on_cp"
		enabled="y"
		regexp="y"
		sequence="100"
		keep_evaluating="y"
		>
	</trigger>
	
</triggers>

<!--  Get our standard constants -->
<include name="constants.lua"/>

<script>
<![CDATA[

--[[
	Search and Destroy was originally written and released by WinkleWinkle (call it version 1.0.0)
	After Winkle left Aardwolf, Nokfah took over management and fixed some things. (call it version 1.1.0)
	Later on, Lunk took over management but got himself banned for unrelated reasons (call it version 1.2.0)
	
	Starling is the current developer as of 1 Jun 2017.  This version is numbered starting at 1.3.0

	Happy hunting, ninjas.
]]--

	require "gmcphelper"
	require "tprint"
	require "serialize"

	local mapper_extender_id = "b6eae87ccedd84f510b74715"

	local showDebug = 0

	local HuntFoundIndex = 1

	local whereTrickFullMob = ""
	local whereTrickMob = ""
	local whereTrickIndex = 0
	local whereTrickNextMob = ""
	local whereTrickNextIndex = 0

	local autoHuntData
	local dir_map = { north = "n", south = "s", east = "e", west = "w", up = "u", down = "d" }	
	local autoHuntMob = ""

	local questSignature = ""
	
	local currentRoom	
	
	local short_mob_name = ""
	local full_mob_name = ""
	local is_exact = 0

	
-- Auto noexp on/off feature

	local var_auto_set_noexp = "off"
	local noexp_onoff = "off"
	local player_on_cp = "yes"
	local new_cp_current_level = "no"
	local noexp_min_tnl = 0
	
	-- called by alias: xset noexp
	function xset_noexp(name, line, wildcards)
		--local tnl = tonumber(gmcp("char.status.tnl"))
		
		if (wildcards[1] == "off") then
			EnableTrigger("trg_auto_set_noexp", false)
			var_auto_set_noexp = "off"
			print("\nAuto noexp is now OFF.\n")
		else
			var_auto_set_noexp = "on"
			noexp_min_tnl = tonumber(wildcards[1])
			EnableTrigger("trg_auto_set_noexp", true)
			ColourNote("#FF8800", "#000000", "\nAuto noexp is now ON.  Will kick in when TNL goes below " .. noexp_min_tnl .. ".\n")
		end
	end
	
	-- called by trigger: You may take campaign this level.
	function auto_set_noexp()
		new_cp_current_level = "yes"
		
		-- if auto set noexp is on --> do stuff
		if (var_auto_set_noexp == "on") then		

			local tnl = tonumber(gmcp("char.status.tnl"))
		
			if (tnl < noexp_min_tnl) and (player_on_cp == "yes") and (noexp_onoff == "off") then
				ColourNote("#FF8800", "#000000", "Auto noexp:  Turning noexp ON (your TNL is less than " .. noexp_min_tnl .. ")")
				noexp_onoff = "on"
				Send("noexp")
				
			-- if over min TNL, noexp is on --> turn noexp off regardless
				elseif (tnl > noexp_min_tnl) and (noexp_onoff == "on") then
					ColourNote("#FF8800", "#000000", "Auto noexp:  Turning noexp OFF (your TNL is greater than " .. noexp_min_tnl .. ")")
					noexp_onoff = "off"
					Send("noexp")
				end
		
		-- if feature is turned off, just show reminder
		else ColourNote("#FF8800", "#000000", "Auto noexp is currently turned OFF.\n")
		end
	end
	
	-- called when mob kill awards xp
	function mobkill_awards_xp(name, line, wildcards)
		if 	(var_auto_set_noexp == "on") then 			-- feature is turned on
			local x = tonumber(gmcp("char.status.tnl"))
			local y = tonumber(wildcards[1])
			local tnl = x - y							-- calculate TNL because timing issues
			
			if 	(tnl < noexp_min_tnl) and				-- tnl less than set point
			(player_on_cp == "yes") and 				-- player is on cp
			(noexp_onoff == "off") and					-- noexp is off
			(new_cp_current_level == "yes") then		-- can take cp at current level
				ColourNote("#FF8800", "#000000", "Auto noexp:  Turning noexp ON (your TNL is less than " .. noexp_min_tnl .. ")")
				noexp_onoff = "on"
				Send("noexp")
			end
			
		end
	end
	
	-- called when player raises a level
	function noexp_raise_level()	
		new_cp_current_level = "yes"
	end
	
	-- called by line "good luck on your campaign" when starting new cp
	function player_start_new_cp()
		player_on_cp = "yes"
		new_cp_current_level = "no"
		
		if (noexp_onoff == "on") and (var_auto_set_noexp == "on") then
			ColourNote("#FF8800", "#000000", "Auto noexp:  Turning noexp OFF (you have started a new CP)")
			noexp_onoff = "off"
			Send("noexp")
		end
	end

	-- called by trigger:  You must level to get a new campaign
	function new_cp_must_level()
		new_cp_current_level = "no"
		if (var_auto_set_noexp == "on") then
		
			if (noexp_onoff == "on") and (player_on_cp == "yes") then			
				ColourNote("#FF8800", "#000000", "Auto noexp:  Turning noexp OFF (can't take new CP at current level)")
				noexp_onoff = "off"
				Send("noexp")
			end
			
		end
	end
	
	function player_is_on_cp()
		player_on_cp = "yes"
	end
	
	function player_not_on_cp()
		player_on_cp = "no"
	end
	
	function noexp_is_on()
		noexp_onoff = "on"
	end
	
	function noexp_is_off()
		noexp_onoff = "off"
	end

-- end of auto noexp feature
	

	function set_short_mob_name(mobName, callingId)
	
		if (callingId == nil) then
			callingId = ""
		else
			callingId = callingId .. ":"
		end
	
		DebugNote("set_short_mob_name:" .. tostring(callingId) .. "," .. tostring(mobName))
		short_mob_name = mobName
	end
	function get_short_mob_name()	
		DebugNote("get_short_mob_name:" .. tostring(short_mob_name))
		return short_mob_name
	end

	function set_full_mob_name(mobName, callingId)
	
		if (callingId == nil) then
			callingId = ""
		else
			callingId = callingId .. ":"
		end
	
		DebugNote("set_full_mob_name:" .. tostring(callingId) .. "," .. tostring(mobName))
		full_mob_name = mobName
	end
	function get_full_mob_name()	
		DebugNote("get_full_mob_name:" .. tostring(full_mob_name))
		return full_mob_name
	end
	
	function set_is_exact(isExact, callingId)
	
		if (callingId == nil) then
			callingId = ""
		else
			callingId = callingId .. ":"
		end
	
		DebugNote("set_is_exact:" .. callingId .. isExact)
		is_exact = isExact
	end
	function get_is_exact()	
		DebugNote("get_is_exact:" .. is_exact)
		return is_exact
	end	
	
	function OnPluginBroadcast(msg, id, name, text)
		--DebugNote("OnPluginBroadcast - " .. text .. ":" .. id .. ":" .. msg .. ":" .. name)
		
		-- Look for GMCP handler.
		if (text == "room.info") then

			res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264", "gmcpval", "room.info")
			--Note(gmcparg)
			luastmt = "room = " .. gmcparg
			assert (loadstring (luastmt or "")) ()		

			if (room ~= nil) then
				currentRoom = room
				--Note(currentRoom.zone)
			else
				currentRoom = nil
			end
		
		elseif (text == "comm.quest") then

			res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264", "gmcpval", "comm")
			luastmt = "gmcpdata = " .. gmcparg
			assert (loadstring (luastmt or "")) ()
			local action = gmcpval("quest.action")
			local mob = gmcpval("quest.targ")
			local room = gmcpval("quest.room")
			
			if (action == "start" or (action == "status" and gmcpval("quest.timer") ~= "")) then
				local cleanRoom = string.gsub(room, "@[a-zA-Z]", "") -- clean out color codes
				local area = gmcpval("quest.area")
				local newSignature = cleanRoom .. "|" .. area
				if (questSignature ~= newSignature) then
					questSignature = newSignature					

					if (IsPluginInstalled(mapper_extender_id) and GetPluginInfo(mapper_extender_id, 17)) then
						DebugNote("xmapper area used")
						Execute("xm {" .. mob .. "} " .. newSignature)
					else
						DebugNote("mapper list used")
						Execute("mapper list " .. room)
					end

					-- broadcast short mob name
					set_full_mob_name(mob, "comm.quest")
					set_short_mob_name(guess_mob_name(mob), "comm.quest")
					set_is_exact(1, "comm.quest")
				end
			elseif (action == "status" and gmcpval("quest.wait") ~= "") then
				questSignature = ""
			end
		end
		
	end

	function quick_scan(name, line, wildcards)
	
		DebugNote("quick_scan:" .. get_short_mob_name())
	
		if (get_short_mob_name() == nil or get_short_mob_name() == "") then
			Send("scan")
		else
			Send(string.format("scan %s", get_short_mob_name()))
		end
	end

	function quick_kill(name, line, wildcards)
		local mylvl = gmcp("char.status.level") + 10 * gmcp("char.base.tier")
		if (get_short_mob_name() == nil or get_short_mob_name() == "") then
			ColourNote("darkorange", "", "\nS&D quick-kill: I don't have a target. Use 'ht', 'qw', or 'xcp' to select a target.\n")
		else
			Execute("k " .. get_short_mob_name())
		end
	end

	local qw = {
			full_name = "",
			short_name = "",
			result_match_name = "",
			exact = 1,
			index = 1
		}
	
	function quick_where_start(name, line, wildcards)

		if (wildcards.mob == "") then
		
			qw.full_name = get_full_mob_name()
			qw.result_match_name = get_full_mob_name()
			qw.short_name = get_short_mob_name()

			
			
			if (qw.full_name == nil or qw.full_name == "") then
				ColourNote("DarkOrange", "", "\nS&D quick-where: I need a target. Use 'ht <mob name>', 'qw <mob name>, or 'xcp' to select a target.\n")
				return
			else
				Note("\nS&D quick-where: Using last quick-where mob...\n")
			end
			
			qw.exact = get_is_exact()
			qw.index = 1
		else
			qw.full_name = wildcards.mob
			qw.result_match_name = wildcards.mob
			qw.short_name = wildcards.mob

			-- set exact
			if (wildcards.exact ~= "") then
				qw.exact = 1
			else
				qw.exact = 0
			end

			-- set index
			if (wildcards.index == "") then
				qw.index = 1
			else
				qw.index = tonumber(wildcards.index)
			end

		end
		
		-- set exact
		if (qw.exact == 1) then
			qw.short_name = guess_mob_name(qw.full_name)
		else
			qw.result_match_name = split(guess_mob_name(qw.full_name), "[^ ]+")[1]
		end
		-- limit to 30 chars
		qw.result_match_name = string.sub(qw.result_match_name, 1, 30)
			
		set_full_mob_name(qw.full_name, "quick_where_start")
		set_short_mob_name(qw.short_name, "quick_where_start")		
		set_is_exact(qw.exact, "quick_where_start")
		DebugNote("qw data - " .. serialize.save_simple(qw))
			
		create_quick_where_trigger(qw.result_match_name)
		
		-- added if check to remove where 1.mob
		if (qw.index == 1 ) then
			Execute(string.format("where %s", qw.short_name))
		else
			Execute(string.format("where %s.%s", qw.index, qw.short_name))
		end
	end
	
	function create_quick_where_trigger(mobName)
		DeleteTrigger("QuickWhereTrigger")
		
		--local match = string.format("(?=.*%s.*)^(?<mob>.{30}) (?<room>.+)$", string.sub(mobName, 1, 30))
		local match = "^(?<mob>.{30}) (?<room>.+)$"
		
		DebugNote(match)
		
		AddTriggerEx(
			"QuickWhereTrigger", 
			match, 
			"", 
			eEnabled + eKeepEvaluating+ eIgnoreCase + eTriggerRegularExpression + eReplace + eTemporary, 
			-1, 
			0, 
			"", 
			"quick_where_match", 
			12, 
			20)	
	end

	function quick_where_match(name, line, wildcards)
	
		DebugNote(name .. ": " .. serialize.save_simple(wildcards))

		if (string.find(line, "There is no", 1, true) ~= nil) then
			DebugNote(" a 'There is no' line")
			return
		end
		
		local mobName = string.lower(trim(wildcards.mob))
		local parts = split(string.lower(qw.short_name), "[^ ]+")
		
		local found = false
		for index = 1, #parts do
			DebugNote("Does '" .. mobName .. "' contain '" .. parts[index] .. "'")
			if (string.find(mobName, parts[index], 1, true) ~= nil) then
				DebugNote("    yes!")
				found = true
				break -- leave loop
			else
				DebugNote("    no.")
			end
		end
		
		if (found == false) then
			-- not our line, keep looking
			return
		end

		EnableTrigger("QuickWhereTrigger", false)
		DeleteTrigger("QuickWhereTrigger")

		-- Does WinkleWinkle_Mapper_Extender plugin exist and is enabled?
		if (IsPluginInstalled(mapper_extender_id) and 
			GetPluginInfo(mapper_extender_id, 17)) then
			DebugNote("qw_match:" .. qw.full_name)
			local cmd = "xm {" .. qw.full_name .. "} " .. wildcards.room
			DebugNote(cmd)
			Execute(cmd)
		else
			Execute("mapper list " .. wildcards.room)
		end
	end

	--------- Hunt Trick ------------
	
	local ht = {
			full_name = "",
			short_name = "",
			exact = 1,
			index = 1
		}

	function hunt_trick(name, line, wildcards)

		-- TODO - make smart aborting - Execute("ah abort")
		EnableTriggerGroup("AutoHunt", false)
		EnableTriggerGroup("HuntTrick", true)

		
		local index
		if (wildcards.mob == "") then
			ht.exact = get_is_exact()
			ht.full_name = get_full_mob_name()
			ht.full_name = get_short_mob_name()
			
			if (ht.full_name == nil or ht.full_name == "") then
				ColourNote("DarkOrange", "", "WW autohunt: I don't have a mob to hunt.")
				return
			end
			
			ht.index = 1
		else
		
			if (wildcards.exact == "x_") then
				ht.exact = 1
			else
				ht.exact = 0
			end
			set_is_exact(ht.exact, "hunt_trick")

			if (wildcards.index == "") then
				ht.index = 1
			else
				ht.index = tonumber(wildcards.index)
			end
			
			ht.full_name = wildcards.mob
			ht.short_name = wildcards.mob
			
			set_full_mob_name(ht.full_name, "hunt_trick")

			if (ht.exact == 1) then
				local guess = guess_mob_name(ht.full_name, true)
				ht.short_name = guess		
			end
			set_short_mob_name(ht.short_name, "hunt_trick")			
		end			

		DebugNote("ht data - " .. serialize.save_simple(ht))

		do_hunt_trick()

	end

 	function hunt_trick_abort(name, line, wildcards)
		EnableTriggerGroup("AutoHunt", false)
		EnableTriggerGroup("HuntTrick", false)

		ColourNote("darkorange", "", "Aborting Hunt Trick...")
	end

 	function hunt_trick_continue(name, line, wildcards)
		DebugNote("hunt_trick_continue()")
		ht.index = ht.index + 1

		if (ht.index > 0 and ht.short_name ~= "") then
			do_hunt_trick()
		end
 	end

 	function hunt_trick_complete(name, line, wildcards)
		DebugNote("hunt_trick_complete:" .. ht.index .. "." .. ht.short_name .. ":" .. ht.exact)
		
		EnableTriggerGroup("AutoHunt", false)
		EnableTriggerGroup("HuntTrick", false)
		
		if (ht.index > 0 and get_short_mob_name() ~= "") then
			local exact = ""
			local qw_name = get_short_mob_name()
			if (ht.exact == 1) then
				exact = "x_"
				qw_name = get_full_mob_name()
			end
			
			HuntFoundIndex = ht.index
			-- added if check to remove hunt 1.mob
			if (ht.index == 1) then
				Execute(string.format("%sqw %s", exact, qw_name))
			else
				Execute(string.format("%sqw %s.%s", exact, ht.index, qw_name))
			end
				
		end
 	end

	function do_hunt_trick()
		DebugNote("do_hunt_trick:" .. ht.index .. ":" .. get_short_mob_name())
		if (ht.index > 0 and get_short_mob_name() ~= "") then
			local hunt
			-- added if check to remove hunt 1.mob
			if (ht.index == 1) then
				hunt = string.format("hunt %s", get_short_mob_name())
			else
				hunt = string.format("hunt %s.%s", ht.index, get_short_mob_name())
			end
			DebugNote("do_hunt_trick - hunt:" .. hunt)
			DebugNote("x_ht command:" .. hunt)
			Execute(hunt)
		end
	end

--		BACKUP OF HUNT TRICK FUNCTION:
--
--	function do_hunt_trick()
--	
--		DebugNote("do_hunt_trick:" .. ht.index .. ":" .. get_short_mob_name())
--	
--		if (ht.index > 0 and get_short_mob_name() ~= "") then
--			local hunt = string.format("hunt %s.%s", ht.index, get_short_mob_name())
--
-- 			DebugNote("do_hunt_trick - hunt:" .. hunt)
--			DebugNote("x_ht command:" .. hunt)
--			Execute(hunt)
--		end
--	end
	
	
	
	function IGuessMobNameBroadcast(mobName, areaId)
		DebugNote("IGuessMobNameBroadcast : " .. mobName .. "," .. areaId)
		set_full_mob_name(mobName, "IGuessMobNameBroadcast")

		local mobName, mobSub = guess_mob_name(mobName, true, areaId)
		if (mobSub == nil) then
			--set_short_mob_name(mobName, "IGuessMobNameBroadcast")
			return mobName, nil
		else
			--set_short_mob_name(mobSub, "IGuessMobNameBroadcast")
			return mobName, serialize.save_simple(mobSub)
		end
	end
	function IGuessMobNameNoBroadcast(mobName, areaId)

		local mobName, mobSub = guess_mob_name(mobName, false, areaId)
		
		if (mobSub == nil) then
			return mobName, nil
		else
			return mobName, serialize.save_simple(mobSub)
		end
	end
	
	function guess_mob_name(mobName, broadcast, areaId)

		local mob = mobName	
		local local_room = room
				
			local parts = split(mobName, "[^ ]+")

			--detect if we have a name like "WinkleWinkle, the coder"
			local comma = (string.find(parts[1], ",") or -1)			
			DebugNote("isName:" .. #parts .. ":" .. comma .. ":" .. #(parts[1]))
			
			if ((#parts > 1) and (comma == #(parts[1]))) then
				mob = string.gsub(parts[1], ",$", "")
				DebugNote(mob)
			else		

				local clean2 = {}
				local cleanIndex = 1
			
				--clean parts
				for key, value in ipairs(parts) do

					local clean = string.gsub(value, "^[aA]$", "")
					clean = string.gsub(clean, "^[aA]n$", "")
					clean = string.gsub(clean, "^[tT]he$", "")
					clean = string.gsub(clean, "^[oO]f$", "")
					clean = string.gsub(clean, "^[Ss]ome$", "")
					
					-- area specific cleans
					if (room ~= nil) then
						if (currentRoom.zone == 'hatchling') then
							clean = string.gsub(clean, "^[Ww]help$", "")
							clean = string.gsub(clean, "^[Dd]ragon$", "")
						elseif (currentRoom.zone == 'rangers') then
							clean = string.gsub(clean, "^[Gg]host$", "")						
						elseif (currentRoom.zone == 'verume') then
							clean = string.gsub(clean, "^[Ll]izardman$", "")
						elseif (currentRoom.zone == 'wooble') then
							clean = string.gsub(clean, "^[Ss]ea$", "")						
						elseif (currentRoom.zone == 'sohtwo') then
							if (string.find(clean, "^[Ee]vil$") == 1 and #parts == 2) then
								parts[2] = ""
							end
							if (string.find(clean, "^[Gg]ood$") == 1 and #parts == 2) then
								parts[2] = ""
							end
						end
					end
					
					clean = split(clean, "[a-zA-Z]+")
		--			tprint(clean)

					if (clean[1] ~= nil and clean[1] ~= "") then
						clean2[cleanIndex] = clean[1]
						cleanIndex = cleanIndex + 1
					end
				end
		--		tprint(clean2)

				if (#clean2 == 0) then
					-- we over-guessed!  User entered "qw whelp" or something
					mob = mobName
				elseif (#clean2 == 1) then
					mob = clean2[1]
				else
					-- improve variances in mob names by only using first four letters of mob name, where we are using two words
					mob = string.sub(clean2[1], 1, 4) .. " " .. string.sub(clean2[#clean2], 1, 4)
				end
			end
		
		DebugNote("Guessed mob is :	" .. mob)
		if (broadcast == nil or broadcast == true) then
			BroadcastPlugin(668, mob)
		end
		
		set_short_mob_name(mob, "guess_mob_name")
		return mob, mob
	end
	

	function auto_hunt_start(name, line, wildcards)
		EnableTriggerGroup("AutoHunt", true)
		EnableTriggerGroup("HuntTrick", false)

		auto_hunt_reset()
		autoHuntMob = wildcards.mob
		SendNoEcho("hunt " .. autoHuntMob)

	end

	function auto_hunt_abort(name, line, wildcards)
		EnableTriggerGroup("AutoHunt", false)
		auto_hunt_reset()

		ColourNote("darkorange", "", "Aborting Auto Hunt...")

	end

	function auto_hunt(name, line, wildcards)

		local conf = wildcards.confidence
		local dir = wildcards.dir

		if (conf == "certain" or conf == "confident") then -- 90-ish to 100%
				auto_hunt_move(dir)
				Execute("hunt " .. autoHuntMob)
				auto_hunt_reset()
		elseif (conf == "almost" or conf == "reasonably sure") then -- need 2 the same				
			if (autoHuntData[dir] > 0) then
				auto_hunt_move(dir)
				auto_hunt_reset()
				Execute("hunt " .. autoHuntMob)
			else
				Note("Taking multiple hunt samples due to skill...")
				autoHuntData[dir] = autoHuntData[dir] + 1
				Execute("hunt " .. autoHuntMob)
			end
		end

	end
	

	-- room.info { "num": 32755, "name": "Charity Lane", "zone": "reme", "terrain": "city", "details": "", "exits": { "n": 32756, "s": 32747, "w": 32795 }, "coord": { "id": 0, "x": 57, "y": 19, "cont": 0 } }	
	function auto_hunt_move(direction)
		
		if (currentRoom == nil) then
			-- don't know our gmcp exits, so just go with it
			DebugNote("going with it")
			Execute(direction) 		
		else
			local dir = dir_map[direction]
			if (currentRoom.exits[dir] ~= nil) then
				if (tonumber(currentRoom.exits[dir]) == -1 ) then
					Execute(direction) 		
				else
					Execute("xmapper move " .. currentRoom.exits[dir])
				end
			else
				--no exit?  try and open a hidden door that way
				Execute("open " .. direction)
				Execute(direction) 		
			end		
		end
		
	end

	function auto_hunt_end()
		auto_hunt_reset()
		autoHuntMob = ""
	end

	function auto_hunt_reset()
		autoHuntData = { count = 0, north = 0, south = 0, east = 0, west = 0, up = 0, down = 0 }
	end
		
----------- where trick functions ---------------------------
	local wt = {
		index = 1,
		name = "",
		match = ""
	}
	
	function wt_continue(name, line, wildcards)	
		wt.index = wt.index + 1
		Send("wt " .. wt.index .. "." .. wt.name)

	end	

	function wt_fail(name, line, wildcards)	
		EnableTriggerGroup("wt", false)
		Note("Aborting where trick...")
	end	
	
----------- page size functions ---------------------------
	local page_size = 0
	local page_size_suspended = false
	
	function capture_page_size(name, line, wildcards)
		Note(name .. ":" .. line .. "," .. tostring(table.concat(wildcards)))
		EnableTrigger("trg_page_size", false)
				
		local size = tonumber(wildcards[1])
		Note("size:" .. tostring(size) .. "-" .. tostring(wildcards[1]))
		
--		if (size == nil) then
--			page_size = 0
--		else
			page_size = size or 0
			Note(page_size)
			Send("pagesize 0")
--		end
	end
	
	function suspend_page_size(name, line, wildcards)
		if (page_size_suspended == false) then
			page_size_suspended = true
			ColourNote("DarkGray", "", "--> Suspending paging... if enabled")
			EnableTrigger("trg_page_size", true)
			Send("pagesize")
		end
	end	

	function resume_page_size(name, line, wildcards)
		ColourNote("DarkGray", "", "--> Resuming paging... if enabled")
		EnableTrigger("trg_page_size", false)
		if (page_size ~= 0) then
			Send("pagesize " .. page_size)
		end
		page_size_suspended = false
	end	
	
------------- utils --------------

function split(line, delim)

	local result = {}
	local index = 1

	for token in string.gmatch(line, delim) do
		result[index] = token
		index = index + 1
	end

	return result
end

function padRight(text, length, padChar)

	local padding = length - string.len(text)
	for i = 1, padding do
		text = text .. padChar
	end

	return text
end

function trim(s)
  return s:match'^()%s*$' and '' or s:match'^%s*(.*%S)'
end
------------- DB ---------------

function fixsql(s)

	if s then
		return "'" .. (string.gsub (s, "'", "''")) .. "'" -- replace single quotes with two lots of single quotes
	else
		return "NULL"
	end -- if
end -- fixsql



------------- DEBUGGING ---------------

function DebugNote(text)
	if (showDebug == 1) then
		--DoAfterSpecial(".1", "Note(\"S&D ~ " .. string.gsub(text, "\"", "\")") .. "\")", sendto.script)
		Note("S&D ~ " .. text)
	end
end

function sd_debug(name, line, wildcards)
	if (showDebug == 0) then
		showDebug = 1
	else
		showDebug = 0
	end
	Note("S&D debug:" .. showDebug)
end


-------------- INSTALL MESSAGE ------------------

function InstallMessage()
	ColourNote("SteelBlue", "", "+=======================================================+")
	ColourNote("SteelBlue", "", "+ S&D Installed - type 'search help' for options        +")
	ColourNote("SteelBlue", "", "+=======================================================+")
end
InstallMessage()

]]>
</script>



</muclient>
