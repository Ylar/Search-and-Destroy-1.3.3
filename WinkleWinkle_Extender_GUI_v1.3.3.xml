<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
		name="WinkleWinkle_Extender_GUI_133"
		author="WinkleWinkle, Starling"
		id="3f498d929793c12cb70f5999"
		language="Lua"
		purpose="Search and Destroy GUI window"
		date_written="2017-10-22 16:00:00"
		requires="4.76"
		version="1.3"
		save_state="y"
		>
</plugin>

<aliases>
	<alias
		match="^xgui fontsize( (?<size>[0-9]+))$"
		script="xgui_cplist_font_size"
		name="xgui_fontsize"
		regexp="y"
		enabled="y"
		sequence="100"
		>
	</alias>
	
	<alias
		match="^xgui linespace( (?<space>[0-9]+))$"
		script="xgui_cplist_line_space"
		name="xgui_linespace"
		regexp="y"
		enabled="y"
		sequence="100"
		>
	</alias>
</aliases>

<triggers>
	<trigger 
		match="CONGRATULATIONS! You have completed your campaign."
		script="do_trg_cp_complete"
		name="trg_cp_complete"
		enabled="y"
		sequence="100"
		>
	</trigger>
	
	<trigger 
		match="Campaign cleared."
		script="do_trg_cp_complete"
		name="trg_cp_quit"
		enabled="y"
		sequence="100"
		>
	</trigger>

<!-- v2 -->
<!-- GQ triggers -->	
<!-- set enabled="y" -->
	<trigger 
		match="^You still have to kill (?<qty>[0-9]) \* (?<mob>[^\(]+) \((?<where>.+?)(?<isdead> - Dead)?\)$"
		script="do_trg_gq_line"
		name="trg_gq_line"
		enabled="y" 
		regexp="y"
		sequence="10"
		>
	</trigger>
	
	<trigger
		match="^(?!You still have to kill).*$"
		script="do_trg_gq_line_end"
		name="trg_gq_line_end"
		enabled="n"
		regexp="y"
		sequence="10"
		>
	</trigger>
</triggers>

<script>
<![CDATA[
-- Search and Destroy version history:
--		1.0   - WinkleWinkle.  Original author of S&D.  It has been the gold standard for cp levelling ever since.  
--		1.1   - Nokfah.  Updated plugins after changes to the mapper plugin rendered 1.0 non-functional.  Originally versioned "2.8" or similar.
--		1.2   - Lunk.  No updates, but briefly took over hosting.  Banned a short time later for reasons not related to S&D.
--		1.3.x - Starling.  Active developer and problem fixer as of 1 Jun 2017, with the initial release of 1.3.0 being the first S&D update to occur in years.
--	   *1.4   - Future developer after Starling, if any.
--	   *2.0   - Future fundamental rewrite/reorganization of S&D.
-- Happy hunting, ninjas.

-- Required files
require "serialize"
require "tprint"
require "movewindow"
require "mw"

-- Initialize variables
local background_colour = ColourNameToRGB("black")
local cpList = {}
local cpType = "none"
local xcp_index_n = 0

-- resizing constraints
RESIZE_TAG_SIZE = 13		-- Size of the zone for resizing via drag
REFRESH_DELAY = 0.066		-- Controls delay between Redraws while resizing.
local win_minimum_width = 280
local win_minimum_height = 40+RESIZE_TAG_SIZE
-- window dimensions
local win_width = tonumber(GetVariable("WinSizeX")) or 280
local win_height = tonumber(GetVariable("WinSizeY")) or 280
-- window position x,y coordinates
local pos_x = tonumber(GetVariable("WinPosX")) or 0
local pos_y = tonumber(GetVariable("WinPosY")) or 0
-- window dimensions min/max
local win_height_minimized = 45
local win_width_minimized = win_minimum_width
local win_width_maximized = tonumber(GetVariable("WinMaxX")) or win_width_minimized
local win_height_maximized = tonumber(GetVariable("WinMaxY")) or 280

local win_state = GetVariable("WinState") or "max"
local win_init = false

-- position where cp target list starts; line spacing between list items
local offset = 34
local line_spacing = 15
local cplist_font_size = 8

local hotspots = {}
local itemHotspots = {}
local win = "extender_gui_" .. GetPluginID ()	-- get a unique name, ensure not empty if outside plugin

local z_order_plugin = "462b665ecb569efbf261422f"
local USER_qq_report_channel = "gt" 			-- group tell

function create_win()
	if (win_init == false) then
		win_init = true
		WindowCreate (win, windowinfo.window_left, windowinfo.window_top, win_width, win_height, windowinfo.window_mode, windowinfo.window_flags, background_colour)  -- create window
		
		WindowShow(win, true)  -- show it 

		if (win_state == "min") then
			mouseup(0, "hsMinimize")
		end		
		
		WindowFont(win, "window_title", "Segoe", 9, false, false, false, false) 				-- title bar font
		WindowFont(win, "button_1", "Segoe", 10, true, false, false, false)						-- main button font
		WindowFont(win, "button_2", "Segoe", 10, true, false, false, false) 					-- title bar button font
		WindowFont(win, "font", "Segoe", 7, false, false, false, false)							-- cp list font
		WindowFont(win, "cplist_area", "Lucida Sans Unicode", cplist_font_size, false, false, false, false)	-- cp list font, area cp's
		WindowFont(win, "cplist_room", "Segoe", cplist_font_size, false, false, false, false)					-- cp list font, room cp's
		if (IsPluginInstalled(z_order_plugin) and GetPluginInfo(z_order_plugin, 17)) then
			CallPlugin(z_order_plugin, "registerMiniwindow", win)
		end		
		draw_window()	
		add_resize_tag()
	end
end

function draw_window()
	WindowRectOp (win, miniwin.rect_fill, 0, 0, 0, 0, background_colour)				-- Clear the window, which is the first step in updating it!
	WindowRectOp (win, 2, 0, 0, 0, 17, 0x000000)						 	-- Draw title bar background and set color (almost black, "17" is height)
	WindowRectOp (win, 4, 0, 0, 0, 17, 0xE0E0E0, 0x909090)					-- Draw title bar border (left/top = light grey, right/bottom = darker grey, "17" is height)
	WindowRectOp (win, 1, 0, 0, 0, 0, 0xC0C0C0, 15)							-- Draw window border.
	WindowRectOp (win, 1, 1, 17, -1, -1, 0x000000, 15)						-- Draw colored perimeter line.
	WindowText (win, "window_title", 		-- draw the window title text and set its color
				"Search & Destroy  1.3.3",	-- window title text
				5, 1, 200, 15,				-- left (x1), top (y1), right (x2), bottom (y2) values for window title text
				0x80FFFF, 					-- colour (light yellow)
				false)						-- not unicode

	if (hotspots["hsDrag1"] == nil) then
		hotspots["hsDrag1"] = WindowAddHotspot(win, "hsDrag1", 0, 0, win_width-20, 16, -- hotspot id, rectangle (left, top, right, bottom)
					"mouseover", "cancelmouseover", "mousedown", "cancelmousedown", "mouseup", 
					"Left click = Drag title bar to move\nRight click = Send window to front/back", miniwin.cursor_arrow, 0)
		WindowDragHandler(win, "hsDrag1", "dragmove", "dragrelease", 0) 
	end

	--Main action buttons. Syntax:  draw_button_1(left, top, width, height, text, hsName, hint, text_dx, text_dy)
	draw_button_1(5, 20, 30, 25, "xcp", "hsXcp", "XCP 1", 3, 3)												-- xcp
	draw_button_1(38, 20, 30, 25, "go", "hsGo", "Go to room 1", 7, 3)										-- GO
	draw_button_1(71, 20, 30, 25, "kk", "hsKill", "Kill target mob", 8, 3)									-- KK
	draw_button_1(104, 20, 30, 25, "nx", "hsNext", "Left click = goto next\nRight click = goto prev", 7, 3)	-- NX
	draw_button_1(137, 20, 30, 25, "qs", "hsQS", "Quick-scan for target", 8, 3)								-- QS
	draw_button_1(182, 20, 30, 25, "ref", "hsRefresh", "Refresh target list (cp check)", 6, 3)				-- ref
	draw_button_1(212, 20, 30, 25, "hta", "hsHTA", "Abort hunt-trick", 5, 3)								-- hta
	draw_button_1(242, 20, 30, 25, "clr", "hsClear", "Clear target list", 6, 3)								-- clr

	-- GUI title bar buttons. Syntax:  draw_button_2(left, top, width, height, text, hsName, hint, text_dx, text_dy)
	draw_button_2(win_width - 17, 0, 17, 17, "?", "hsHelp", "Show help", 4, 0)			-- help
	--draw_button_2(win_width - 30, 0, 15, 17, ".", "hsMinimize", "Minimize", 5, 0)		-- minimize
	--draw_button_2(win_width - 15, 0, 15, 17, "^", "hsMaximize", "Maximize", 3, 0)		-- maximize
end
	
function draw_button_1(left, top, width, height, text, hsName, hint, text_dx, text_dy)					-- Draw button type 1 (main action buttons)
	local x1,x2,y1,y2 = left, (left+width), top, (top+height)											-- x and y values for button boundaries
	local tx1,tx2,ty1,ty2 = (left+text_dx), (left+width-text_dx), (top+text_dy), (top+height-text_dy)	-- x and y values for text location
	WindowRectOp(win, 2, x1, y1, x2, y2, 0x000000)														-- Draw background and set color (black)
	WindowRectOp (win, 4, x1, y1, x2, y2, 0xE0E0E0,	0x808080)											-- Draw button border (left/top = light grey, right/bottom = darker grey)
	WindowText(win, "button_1", text, tx1, ty1, tx2, ty2, 0xE0E0E0, false)								-- Draw button text ("button" font, light grey)
	if (hotspots[hsName] == nil) then																-- Make button clickable by defining a hotspot
		hotspots[hsName] = WindowAddHotspot(win, hsName, x1, y1, x2, y2,							-- Hotspot name and location info
			"mouseover", "cancelmouseover", "mousedown", "cancelmousedown", "mouseup",				-- Mouse actions
			"" .. (hint or text), miniwin.cursor_hand, 0)											-- Tooltip text, cursor shape (hand)
	end
end

function draw_button_2(left, top, width, height, text, hsName, hint, text_dx, text_dy)					-- Draw button type 2 (title bar buttons)
	local x1,x2,y1,y2 = left, (left+width), top, (top+height)											-- x and y values for button boundaries
	local tx1,tx2,ty1,ty2 = (left+text_dx), (left+width-text_dx), (top+text_dy), (top+height-text_dy)	-- x and y values for text location
	WindowRectOp (win, 2, x1, y1, x2, y2, 0x000000)														-- Draw background and set color (black)
	WindowRectOp (win, 4, x1, y1, x2, y2, 0xE0E0E0,	0x808080)											-- Draw button border (left/top = light grey, right/bottom = darker grey)
	WindowText(win, "button_2", text, tx1, ty1, tx2, ty2, 0xE0C0C0, false)								-- Draw button text ("button" font, light grey)
	if (hotspots[hsName] == nil) then																-- Make button clickable by defining a hotspot
		hotspots[hsName] = WindowAddHotspot(win, hsName, x1, y1, x2, y2,							-- Hotspot name and location info
			"mouseover", "cancelmouseover", "mousedown", "cancelmousedown", "mouseup", 				-- Mouse actions
			"" .. (hint or text), miniwin.cursor_hand, 0)											-- Tooltip text, cursor shape (hand)
	end
end

function xgui_cplist_font_size(name, line, wildcards)
	if (wildcards.size == "") then
		print("Cp list font size = " .. cplist_font_size .. "\n")
	else
		cplist_font_size = tonumber(wildcards.size)
		WindowFont(win, "cplist_area", "Lucida Sans Unicode", cplist_font_size, false, false, false, false)		-- cp list font, area cp's
		WindowFont(win, "cplist_room", "Segoe", cplist_font_size, false, false, false, false)					-- cp list font, room cp's
		draw_window()
		write_items("cp")
		add_resize_tag()
		Redraw()
		print("Cp list font size set to " .. cplist_font_size .. ".\n")
	end
end

function xgui_cplist_line_space(name, line, wildcards)
	if (wildcards.space == "") then
		print("Cp list line spacing = " .. line_spacing .. "\n")
	else
		line_spacing = tonumber(wildcards.space)
		draw_window()
		write_items("cp")
		add_resize_tag()
		Redraw()
		print("Cp list line spacing set to " .. line_spacing .. ".\n")
	end
end

--clear the cp mob list
function clear_hotspots()
	for i,v in ipairs (itemHotspots) do
		--Note(i, v)
		WindowDeleteHotspot (win, v);
	end
	itemHotspots = {}
end

function write_items(mode)
	--Note(current_mode)
	--clear cp items
	clear_hotspots()
	if (win_state == "min") then
		return
	end

	if (current_mode() == "cp") then
		write_list_items(cpList)
	end
end

function gui_filter_cplist(list)
	local cptype_index = 0
	local cptype_list = {}
	for i,v in ipairs (list) do
		if (cpType == "none") then
			cptype_list = list
		elseif (cpType == "area") and (v.type == "area") then
			cptype_index = cptype_index + 1
			cptype_list[cptype_index] = v
		elseif (cpType == "area") and (v.type == "room") then
			--[cptype_index] = nil
			--cptype_index = cptype_index - 1
		elseif (cpType == "room") and (v.type == "room") then
			cptype_index = cptype_index + 1
			cptype_list[cptype_index] = v
		elseif (v.type == "unknown") then
			cptype_index = cptype_index + 1
			cptype_list[cptype_index] = v
		end
	end
	cpList = cptype_list
end

function write_list_items(list)
	-- puts the campaign mob names into the list
	local index = 0
	for i,v in ipairs (list) do
		-- Abort loop if printed item would not be visible.
		if (tonumber(i) * line_spacing + offset > win_height - 5) then break end
		index = index + 1
		local qty = ""
		if (v.qty > 1) then
			qty = string.format("%s * ", v.qty)
		end
		
		local mobText = v.mob
		local deadFlag = false
		if (v.isDead ~= nil and v.isDead ~= "") then
			mobText = mobText .. " [Dead]"
			deadFlag = true
		end
		
		local place
		local color = "0x0000FF"	-- red
		if (deadFlag == true) then
			color = "0x505050"		-- darkish grey
		elseif (index == xcp_index_n) then
			color = "0x0060FF"		-- orange 
		else
			color = "0xD0D0D0"		-- very light grey
		end
		
		if (v.type == "area") then
			place = string.format("%s", v.areaId)
		elseif (v.type == "room") then
			place = string.format("'%s' (%s) [%s-%s]", v.roomName, v.areaId, v.min, v.max)
		else -- unknown
			place = string.format("'%s' is Unknown", v.roomName, v.areaId)
			if (deadFlag == false) then
				color = "0x0000E0"
			else
				color = "0x000040"
			end
		end
		
		local displayText = string.format("%s) %s%s - %s", index, qty, mobText, place)
		local tooltipText = "(" .. i .. ") " .. mobText .. " - " .. v.areaId

		width   = WindowTextWidth (win, "font", displayText)  -- width of text
		height  = WindowFontInfo (win, "font", 1)   -- height of the font
		ascent  = WindowFontInfo (win, "font", 2)   -- ascent (amount above the baseline)
		descent = WindowFontInfo (win, "font", 3)   -- descent (amount below the baseline)
		leading = WindowFontInfo (win, "font", 4)   -- leading (space above the highest letter)
		--Note(string.format("w:%s h:%s asc:%s desc:%s lead:%s", width, height, ascent, descent, leading)) 		
		
		local cplist_font = "cplist_" .. cpType	
		WindowText (win, cplist_font,										-- displays the target links
					displayText,										-- target link text
					10, (tonumber(i) * line_spacing) + offset, 0, 0,	-- rectangle of link hotspot
					color,												-- color set according to above
					false)												-- not Unicode
				
		local hsLength = (5 + width)
		if (hsLength < 0) then hsLength = 0 end
		local hsHeight = ((tonumber(i) * line_spacing) + 12 + offset)
		if (hsHeight < 0) then hsHeight = 0 elseif (tonumber(i) * line_spacing + offset + hsHeight > win_height - RESIZE_TAG_SIZE) then
			-- Prevent list item's hotspot from overlapping with the resize tag
			if (hsLength > win_width - RESIZE_TAG_SIZE) then hsLength = win_width - RESIZE_TAG_SIZE end
		end
		--Note(string.format("%s %s %s %s", 5, (tonumber(i) * line_spacing) + offset, hsLength, hsHeight))
		local eventHandler
		if (current_mode() == "cp") then
			eventHandler = "mouseup_cp"
		end
		itemHotspots[#itemHotspots+1] = i
		WindowAddHotspot(win, 
						i,  -- HS id
						5, (tonumber(i) * line_spacing) + offset, hsLength, hsHeight, -- rectangle
						"mouseover", 
						"cancelmouseover", 
						"mousedown",
						"cancelmousedown", 
						eventHandler, 
						tooltipText,  -- tooltip text
						miniwin.cursor_hand, 0)  -- hand cursor
	end
end

function OnPluginBroadcast (msg, id, name, text)
	if (id == "b6eae87ccedd84f510b74715") then -- Mapper Extender
		if (msg == 669) then
			-- load serialize.save_simple data
			luastmt = "obj = " .. text
			assert (loadstring (luastmt or "")) ()
			cpList = obj
			draw_window()
			write_items("cp")
			add_resize_tag()
			Redraw()
		elseif (msg == 675) then	-- cp type
			cpType = text
			gui_filter_cplist(cpList)
			draw_window()
			write_items("cp")
			add_resize_tag()
			Redraw()
		elseif (msg == 680) then	-- xcp index, tells GUI which list item to highlight
			xcp_index_n = tonumber(text)
			draw_window()
			write_items("cp")
			add_resize_tag()
			Redraw()
		end
		
	elseif (id == "e50b1d08a0cfc0ee9c442001") then -- S&D
	end
end

function current_mode()
	if (#cpList > 0) then
		return "cp"
	else
		return "gq"
	end
end

function ResizeMoveCallback()
	if GetPluginVariable("c293f9e7f04dde889f65cb90", "lock_down_miniwindows") == "1" then
		return
	end
	posx, posy = WindowInfo (win, 17), WindowInfo (win, 18)
	win_width = win_width + posx - startx
	startx = posx
	if (win_width < win_minimum_width) then
		win_width = win_minimum_width
		startx = windowinfo.window_left+win_width
	elseif (windowinfo.window_left+win_width > GetInfo(281)) then
		win_width = GetInfo(281)-windowinfo.window_left
		startx = GetInfo(281)
	end

	win_height = win_height + posy - starty
	starty = posy
	if (win_height < win_minimum_height) then
		win_height = win_minimum_height
		starty = windowinfo.window_top+win_height
	elseif (windowinfo.window_top+win_height > GetInfo(280)) then
		win_height = GetInfo(280)-windowinfo.window_top
		starty = GetInfo(280)
	end
	WindowResize(win, win_width, win_height, background_colour)
	if (utils.timer() - lastRefresh > REFRESH_DELAY) then
		draw_window()
		write_items()
		add_resize_tag()
		Redraw()
		lastRefresh = utils.timer()
	end
end

lastRefresh = 0

function ResizeReleaseCallback()
	win_height_maximized = win_height
	win_width_maximized = win_width
	draw_window()
	write_items()
	add_resize_tag()
	Redraw()
end

function add_resize_tag()
	-- draw the resize widget bottom right corner, if not minimized
	if (win_state == "max") then
		WindowLine(win, win_width-3,  win_height-2, win_width-2, win_height-3, 0xffffff, 0, 2)
		WindowLine(win, win_width-4,  win_height-2, win_width-2, win_height-4, 0x696969, 0, 1)
		WindowLine(win, win_width-6,  win_height-2, win_width-2, win_height-6, 0xffffff, 0, 2)
		WindowLine(win, win_width-7,  win_height-2, win_width-2, win_height-7, 0x696969, 0, 1)
		WindowLine(win, win_width-9,  win_height-2, win_width-2, win_height-9, 0xffffff, 0, 2)
		WindowLine(win, win_width-10, win_height-2, win_width-2, win_height-10, 0x696969, 0, 1)
		WindowLine(win, win_width-12, win_height-2, win_width-2, win_height-12, 0xffffff, 0, 2)
		WindowLine(win, win_width-13, win_height-2, win_width-2, win_height-13, 0x696969, 0, 1)
	end

	-- Hotspot for resizer.
	if (WindowHotspotInfo(win, "hsResize", 1) == nil) then
		WindowAddHotspot(win, "hsResize", win_width-RESIZE_TAG_SIZE, win_height-RESIZE_TAG_SIZE, win_width, win_height, "", "", "mousedown", "", "", "", 6, 0)
		WindowDragHandler(win, "hsResize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)
	else
		WindowMoveHotspot(win, "hsResize", win_width-RESIZE_TAG_SIZE, win_height-RESIZE_TAG_SIZE, 0, 0)
	end
end

function mousedown(flags, hotspot_id)
	if (hotspot_id == "hsResize") then
		startx, starty = WindowInfo (win, 17), WindowInfo (win, 18)
	elseif (hotspot_id == "hsDrag1") then
		startx, starty = WindowInfo (win, 14), WindowInfo (win, 15)
	end
end

-- When command button is clicked, this function sends appropriate command
function mouseup(flags, hotspot_id)
	--Note(hotspot_id)
	if (hotspot_id == "hsDrag1") then		-- Title bar
		if bit.band(flags, 0x20) == 0 then	-- left click
			local nothing
		else								-- right click
			right_click_menu()
		end
	elseif (hotspot_id == "hsXcp") then		-- XCP button
		Execute("xcp 1")
		Execute("qs")
	elseif (hotspot_id == "hsGo") then		-- GO button
		Execute("go")
		Execute("qs")
	elseif (hotspot_id == "hsNext") then	-- NX button
		if bit.band(flags, 0x20) == 0 then	-- left click
			Execute("nx")
			--Execute("qs")
		else								-- right click
			Execute("nx-")
			--Execute("qs")
		end
	elseif (hotspot_id == "hsQS") then		-- QS button
		Execute("qs")
	elseif (hotspot_id == "hsKill") then	-- KK button
		Execute("kk")
	elseif (hotspot_id == "hsHTA") then		-- HTA button
		Execute("hta")
	elseif (hotspot_id == "hsRefresh") then	-- REF button
		--if (current_mode() == "cp") then
		Execute("cp ch")
		--end
		mouseup(0, "hsMaximize")
	elseif (hotspot_id == "hsClear") then	-- CLR button
		cpList = {}
		draw_window()
		write_items()
		add_resize_tag()
		Redraw()
--	elseif (hotspot_id == "hsMinimize") then	-- minimize (dot) button in title bar
--		win_state = "min"
--		win_height = win_height_minimized
--		WindowResize(win, win_width, win_height, background_colour)
--		draw_window()
--		write_items()
--		add_resize_tag()
--		Redraw()
--	elseif (hotspot_id == "hsMaximize") then	-- maximize (carat) button in title bar
--		win_state = "max"
--		win_height = win_height_maximized
--		WindowResize(win, win_width, win_height, background_colour)
--		draw_window()
--		write_items()
--		add_resize_tag()
--		Redraw()
--	elseif (hotspot_id == "hsFront") then
--		if (IsPluginInstalled(z_order_plugin) and GetPluginInfo(z_order_plugin, 17)) then
--			CallPlugin(z_order_plugin, "boostMe", win)
--		end
--	elseif (hotspot_id == "hsBack") then
--		if (IsPluginInstalled(z_order_plugin) and GetPluginInfo(z_order_plugin, 17)) then
--			CallPlugin(z_order_plugin, "dropMe", win)
--		end
	elseif (hotspot_id == "hsHelp") then
		Execute("ww help")
	end
end

function mouseup_cp(flags, hotspot_id)
	if (tonumber(hotspot_id) ~= nil) then
		Execute("xcp " .. hotspot_id)
	end
end

function right_click_menu()
	menustring = ("Bring To Front|Send To Back")
	result = WindowMenu (win,
		WindowInfo (win, 14),		-- x position
		WindowInfo (win, 15),		-- y position
		menustring)					-- content
	if (result == "Bring To Front") then
		CallPlugin("462b665ecb569efbf261422f","boostMe", win)
	elseif (result == "Send To Back") then
		CallPlugin("462b665ecb569efbf261422f","dropMe", win)
	end
end

function do_trg_cp_complete(name, line, wildcards) 
	if (current_mode() == "cp") then
		mouseup(0, "hsClear") 
	end
end

------------ v2 -- GQ Items --------------
local do_trg_gq_line_index = 0

function do_trg_gq_line(name, line, wildcards) 
	--Note("Detected gq")
	cpList = {}
	--clear cp items
	clear_hotspots()
	EnableTrigger("trg_gq_line_end", true)
	if (do_trg_gq_line_index == 0) then
		draw_window()
		add_resize_tag()
	end
	do_trg_gq_line_index = do_trg_gq_line_index + 1
	local qty = ""
	if (tonumber(wildcards.qty) > 1) then
		qty = wildcards.qty .. " * "
	end
	
	local displayText = string.format("%s) %s%s %s - %s", do_trg_gq_line_index, qty, wildcards.mob, wildcards.isdead, wildcards.where)
	--Note(displayText)

	width   = WindowTextWidth (win, "font", displayText)  -- width of text
	height  = WindowFontInfo (win, "font", 1)   -- height of the font
	ascent  = WindowFontInfo (win, "font", 2)   -- ascent (amount above the baseline)
	descent = WindowFontInfo (win, "font", 3)   -- descent (amount below the baseline)
	leading = WindowFontInfo (win, "font", 4)   -- leading (space above the highest letter)
	--Note(string.format("w:%s h:%s asc:%s desc:%s lead:%s", width, height, ascent, descent, leading)) 		

	WindowText (win, "font", 
				displayText,   -- text
				5, (tonumber(do_trg_gq_line_index) * line_spacing) + offset, 0, 0,        -- rectangle
				0xFFFFFF,
				false)              -- not Unicode
					
end

-- Shuts down GQ functions after the GQ ends
function do_trg_gq_line_end(name, line, wildcards)
	EnableTrigger("trg_gq_line_end", false)
	do_trg_gq_line_index = 0
end

function dragmove(flags, hotspot_id)
	if bit.band(flags, 0x20) == 0 then
		pos_x = WindowInfo(win, 17) - startx
		pos_y = WindowInfo(win, 18) - starty
		local max_x = GetInfo(281) - 100
		local max_y = GetInfo(280) - 60
		if (pos_x <= 1) then 			-- Prevents window from leaving the screen.
			pos_x = 1
		elseif (pos_x >= max_x) then 	
			pos_x = max_x
		end
		if (pos_y <= 1) then 			
			pos_y = 1
		elseif (pos_y >= max_y) then 	
			pos_y = max_y
		end
		WindowPosition(win, pos_x, pos_y, miniwin.pos_stretch_to_view, miniwin.create_absolute_location) -- move window to new location
	else
		return
    end
end

function dragrelease(flags, hotspot_id)
--  print ("mouse drag release for " .. hotspot_id)
--  print ("released at position", WindowInfo (win, 17), WindowInfo (win, 18))
end

function OnPluginClose ()
	OnPluginSaveState()
	WindowShow(win, false) -- hide window, refresh screen
end 

function OnPluginSaveState()
	-- save window current location for next time
	movewindow.save_state (win)

	if WindowInfo(win, 3) and WindowInfo(win, 4) then
		win_width = WindowInfo(win, 3)
		win_height = WindowInfo(win, 4)
	end
	SetVariable("WinPosX", pos_x)
	SetVariable("WinPosY", pos_y)
	SetVariable("WinState", win_state)
	SetVariable("WinSizeX", win_width)
	SetVariable("WinSizeY", win_height)
	SetVariable("WinMaxX", win_width_maximized)
	SetVariable("WinMaxY", win_height_maximized)
end

function OnPluginInstall()
	--- install the window movement handler, get back the window position.
	windowinfo = movewindow.install (win, miniwin.pos_center, miniwin.create_absolute_location, false, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly},{x=pos_x, y=pos_y})
	
	-- run it all
	create_win()
end

	-- S&D PLUGIN ID'S:
	-- Mapper Extender			id="b6eae87ccedd84f510b74715"
	-- Mapper Extender GUI		id="3f498d929793c12cb70f5999"
	-- Search and Destroy		id="e50b1d08a0cfc0ee9c442001"

	-- OTHER RELEVANT PLUGINS
	-- Aardmush GMCP Mapper		id = "b6eae87ccedd84f510b74714"
	-- GMCP handler plugin		id = "3e7dedbe37e44942dd46d264"
	
]]>
</script>


<![CDATA[
<!--
BUG : Show UNKNOWNS [WW]

-->
]]>
</muclient>
